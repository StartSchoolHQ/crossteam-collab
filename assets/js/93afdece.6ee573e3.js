"use strict";(self.webpackChunkstart_school_wiki=self.webpackChunkstart_school_wiki||[]).push([[5739],{3547:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"BE/Task/be-task6","title":"Databases","description":"Understanding databases","source":"@site/docs/BE/Task/task6.md","sourceDirName":"BE/Task","slug":"/BE/Task/be-task6","permalink":"/crossteam-collab/docs/BE/Task/be-task6","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Databases","description":"Understanding databases","id":"be-task6"},"sidebar":"beSidebar","previous":{"title":"Databases","permalink":"/crossteam-collab/docs/BE/Task/be-task5"},"next":{"title":"Databases","permalink":"/crossteam-collab/docs/BE/Task/be-task7"}}');var o=t(4848),r=t(8453);const a={title:"Databases",description:"Understanding databases",id:"be-task6"},d=void 0,c={},i=[{value:"File: <code>app.js</code>",id:"file-appjs",level:3}];function l(e){const n={code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h3,{id:"file-appjs",children:["File: ",(0,o.jsx)(n.code,{children:"app.js"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Option A (Reading Only)"}),": If you open this in a browser without running the backend, you'll see errors. This is expected."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Option B (Running)"}),": If you followed the setup steps above and started ",(0,o.jsx)(n.code,{children:"server.js"}),", this will work! Open your browser's Developer Tools (F12) \u2192 Console tab to see the logs."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Create a file called ",(0,o.jsx)(n.code,{children:"app.js"})," and paste this code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// ========================================\n// FILE: app.js\n// ========================================\n// Frontend JavaScript - Makes API calls to backend\n// Feel free to add console.log statements to see what's happening\n// ========================================\n\n// API base URL (where our backend server is running)\nconst API_BASE_URL = 'http://localhost:3000/api';\n\n// Load products when page loads\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('Page loaded, initializing...');\n    loadProducts();\n    setupOrderForm();\n});\n\n// ========================================\n// LOAD PRODUCTS FROM BACKEND\n// ========================================\nasync function loadProducts() {\n    console.log('Loading products from backend...');\n    \n    try {\n        // STEP 1: Frontend makes GET request to backend\n        const response = await fetch(`${API_BASE_URL}/products`);\n        \n        // STEP 2: Frontend receives response from backend\n        const data = await response.json();\n        \n        console.log('Received products:', data);\n        \n        // STEP 3: Frontend displays the data\n        displayProducts(data.products);\n    } catch (error) {\n        console.error('Error loading products:', error);\n        showMessage('Failed to load products', 'error');\n    }\n}\n\nfunction displayProducts(products) {\n    const container = document.getElementById('products-container');\n    \n    if (products.length === 0) {\n        container.innerHTML = '<p>No products available</p>';\n        return;\n    }\n    \n    container.innerHTML = products.map(product => `\n        <div class=\"product\">\n            <h3>${product.name}</h3>\n            <p>Price: $${product.price}</p>\n            <p>Stock: ${product.stock} available</p>\n            <p><strong>Product ID: ${product.id}</strong></p>\n        </div>\n    `).join('');\n}\n\n// ========================================\n// PLACE ORDER - SEND TO BACKEND\n// ========================================\nfunction setupOrderForm() {\n    const form = document.getElementById('order-form');\n    \n    form.addEventListener('submit', async function(event) {\n        event.preventDefault();\n        \n        // STEP 1: Frontend collects data from form\n        const productId = parseInt(document.getElementById('product-id').value);\n        const quantity = parseInt(document.getElementById('quantity').value);\n        const customerName = document.getElementById('customer-name').value;\n        \n        // STEP 2: Frontend prepares the data to send\n        const orderData = {\n            productId: productId,\n            quantity: quantity,\n            customerName: customerName\n        };\n        \n        console.log('Frontend sending order:', orderData);\n        \n        try {\n            // STEP 3: Frontend makes POST request to backend\n            const response = await fetch(`${API_BASE_URL}/orders`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(orderData)\n            });\n            \n            // STEP 4: Frontend receives response from backend\n            const data = await response.json();\n            \n            console.log('Frontend received response:', data);\n            \n            // STEP 5: Frontend shows appropriate message\n            if (response.ok) {\n                showMessage(`Order placed successfully! Order ID: ${data.order.id}, Total: $${data.order.total}`, 'success');\n                form.reset();\n                loadProducts(); // Reload products to show updated stock\n            } else {\n                showMessage(`Error: ${data.message}`, 'error');\n            }\n        } catch (error) {\n            console.error('Error placing order:', error);\n            showMessage('Failed to place order. Network error.', 'error');\n        }\n    });\n}\n\nfunction showMessage(message, type) {\n    const messageDiv = document.getElementById('message');\n    messageDiv.textContent = message;\n    messageDiv.className = `message ${type}`;\n    \n    // Clear message after 5 seconds\n    setTimeout(() => {\n        messageDiv.textContent = '';\n        messageDiv.className = '';\n    }, 5000);\n}\n"})}),"\n",(0,o.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);