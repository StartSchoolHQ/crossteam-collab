"use strict";(self.webpackChunkstart_school_wiki=self.webpackChunkstart_school_wiki||[]).push([[6414],{3744:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"BE/Task/be-task7","title":"Databases","description":"Understanding databases","source":"@site/docs/BE/Task/task7.md","sourceDirName":"BE/Task","slug":"/BE/Task/be-task7","permalink":"/crossteam-collab/docs/BE/Task/be-task7","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Databases","description":"Understanding databases","id":"be-task7"},"sidebar":"beSidebar","previous":{"title":"Databases","permalink":"/crossteam-collab/docs/BE/Task/be-task6"},"next":{"title":"Databases","permalink":"/crossteam-collab/docs/BE/Task/be-task8"}}');var r=s(4848),o=s(8453);const c={title:"Databases",description:"Understanding databases",id:"be-task7"},a=void 0,d={},i=[{value:"File: <code>server.js</code>",id:"file-serverjs",level:3}];function l(e){const n={code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h3,{id:"file-serverjs",children:["File: ",(0,r.jsx)(n.code,{children:"server.js"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Option A (Reading Only)"}),": You're just reading this to understand the backend logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Option B (Running)"}),": After running ",(0,r.jsx)(n.code,{children:"node server.js"})," in your terminal, this server will start and you'll see logs in the terminal as requests come in."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Create a file called ",(0,r.jsx)(n.code,{children:"server.js"})," and paste this code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// ========================================\n// FILE: server.js\n// ========================================\n// Backend - Express server with mock database\n// This is where all the \"real work\" happens\n// ========================================\n\n// Import Express framework\nconst express = require('express');\nconst cors = require('cors');\n\n// Create an Express application\nconst app = express();\n\n// Middleware\napp.use(cors()); // Allow frontend to make requests from different port\napp.use(express.json()); // Parse JSON request bodies\n\n// Define the port where server will listen\nconst PORT = 3000;\n\n// ========================================\n// MOCK DATABASE\n// ========================================\n// In a real app, this would be PostgreSQL, MongoDB, etc.\n// Here we use JavaScript objects to demonstrate concepts\n// Feel free to add more products or change the data!\n\nlet products = [\n    { id: 1, name: 'Laptop', price: 999, stock: 5 },\n    { id: 2, name: 'Mouse', price: 25, stock: 50 },\n    { id: 3, name: 'Keyboard', price: 75, stock: 30 }\n];\n\nlet orders = [];\nlet nextOrderId = 1;\n\n// ========================================\n// DATABASE FUNCTIONS\n// ========================================\n// These simulate database queries\n// In a real app, these would be SQL queries or MongoDB operations\n\nfunction getAllProducts() {\n    return products;\n}\n\nfunction getProductById(id) {\n    return products.find(product => product.id === id);\n}\n\nfunction createOrder(orderData) {\n    const newOrder = {\n        id: nextOrderId++,\n        ...orderData,\n        createdAt: new Date()\n    };\n    orders.push(newOrder);\n    return newOrder;\n}\n\nfunction updateProductStock(productId, newStock) {\n    const product = products.find(p => p.id === productId);\n    if (product) {\n        product.stock = newStock;\n        return true;\n    }\n    return false;\n}\n\nfunction getAllOrders() {\n    return orders;\n}\n\n// ========================================\n// API ENDPOINTS\n// ========================================\n// These are the URLs that the frontend can call\n\n// GET /api/products\n// Retrieves all products\napp.get('/api/products', (req, res) => {\n    console.log('Backend received: GET /api/products');\n    \n    // Step 1: Get data from database\n    const allProducts = getAllProducts();\n    \n    console.log('Backend sending:', allProducts);\n    \n    // Step 2: Send response\n    res.json({\n        success: true,\n        products: allProducts\n    });\n});\n\n// GET /api/products/:id\n// Retrieves a specific product\napp.get('/api/products/:id', (req, res) => {\n    console.log(`Backend received: GET /api/products/${req.params.id}`);\n    \n    // Step 1: Extract ID from URL\n    const productId = parseInt(req.params.id);\n    \n    // Step 2: Query database\n    const product = getProductById(productId);\n    \n    // Step 3: Check if product exists\n    if (!product) {\n        console.log('Backend sending: 404 Product not found');\n        return res.status(404).json({\n            success: false,\n            message: 'Product not found'\n        });\n    }\n    \n    console.log('Backend sending:', product);\n    \n    // Step 4: Send response\n    res.json({\n        success: true,\n        product: product\n    });\n});\n\n// POST /api/orders\n// Creates a new order\n// This is the most complex endpoint - it does a lot!\napp.post('/api/orders', (req, res) => {\n    console.log('Backend received: POST /api/orders');\n    console.log('Request body:', req.body);\n    \n    // Step 1: Extract data from request\n    const { productId, quantity, customerName } = req.body;\n    \n    // Step 2: Validation - check all required fields\n    if (!productId || !quantity || !customerName) {\n        console.log('Backend sending: 400 Missing required fields');\n        return res.status(400).json({\n            success: false,\n            message: 'Missing required fields'\n        });\n    }\n    \n    // Step 3: Check if product exists and has stock\n    const product = getProductById(productId);\n    \n    if (!product) {\n        console.log('Backend sending: 404 Product not found');\n        return res.status(404).json({\n            success: false,\n            message: 'Product not found'\n        });\n    }\n    \n    if (product.stock < quantity) {\n        console.log(`Backend sending: 400 Not enough stock (available: ${product.stock})`);\n        return res.status(400).json({\n            success: false,\n            message: `Not enough stock. Available: ${product.stock}`\n        });\n    }\n    \n    // Step 4: Calculate total\n    const total = product.price * quantity;\n    console.log(`Calculating total: ${product.price} \xd7 ${quantity} = ${total}`);\n    \n    // Step 5: Create order in database\n    const newOrder = createOrder({\n        productId,\n        productName: product.name,\n        quantity,\n        customerName,\n        total\n    });\n    console.log('Created order in database:', newOrder);\n    \n    // Step 6: Update product stock\n    const oldStock = product.stock;\n    const newStock = product.stock - quantity;\n    updateProductStock(productId, newStock);\n    console.log(`Updated stock: ${oldStock} \u2192 ${newStock}`);\n    \n    // Step 7: Send success response\n    console.log('Backend sending: 201 Order created successfully');\n    res.status(201).json({\n        success: true,\n        message: 'Order created successfully',\n        order: newOrder\n    });\n});\n\n// GET /api/orders\n// Retrieves all orders (for inspection)\napp.get('/api/orders', (req, res) => {\n    console.log('Backend received: GET /api/orders');\n    \n    const allOrders = getAllOrders();\n    \n    console.log('Backend sending:', allOrders);\n    \n    res.json({\n        success: true,\n        orders: allOrders\n    });\n});\n\n// ========================================\n// START SERVER\n// ========================================\n\napp.listen(PORT, () => {\n    console.log(`Server running on http://localhost:${PORT}`);\n    console.log('\\nAvailable endpoints:');\n    console.log('  GET  /api/products');\n    console.log('  GET  /api/products/:id');\n    console.log('  POST /api/orders');\n    console.log('  GET  /api/orders');\n    console.log('\\nWatch this console to see what happens when requests come in!');\n});\n"})}),"\n",(0,r.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var t=s(6540);const r={},o=t.createContext(r);function c(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);