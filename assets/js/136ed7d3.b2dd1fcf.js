"use strict";(self.webpackChunkstart_school_wiki=self.webpackChunkstart_school_wiki||[]).push([[3880],{8913:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"WebAppWorkflow/LoginExample/8-be","title":"Backend processing","description":"Cross Team Collaboration","source":"@site/docs/WebAppWorkflow/LoginExample/8.be.md","sourceDirName":"WebAppWorkflow/LoginExample","slug":"/WebAppWorkflow/LoginExample/8-be","permalink":"/crossteam-collab/docs/WebAppWorkflow/LoginExample/8-be","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Backend processing","description":"Cross Team Collaboration","id":"8-be"},"sidebar":"webAppWorkflowSidebar","previous":{"title":"The API Call","permalink":"/crossteam-collab/docs/WebAppWorkflow/LoginExample/7-api"},"next":{"title":"Database Interaction","permalink":"/crossteam-collab/docs/WebAppWorkflow/LoginExample/9-database"}}');var i=n(4848),t=n(8453);const r={title:"Backend processing",description:"Cross Team Collaboration",id:"8-be"},a=void 0,d={},l=[{value:"title: &quot;Backend processing&quot;\ndescription: &quot;Cross Team Collaboration&quot;\nid: 8-be",id:"title-backend-processingdescription-cross-team-collaborationid-8-be",level:2},{value:"Questions to explore in the code",id:"questions-to-explore-in-the-code",level:3}];function c(e){const s={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"title-backend-processingdescription-cross-team-collaborationid-8-be",children:'title: "Backend processing"\ndescription: "Cross Team Collaboration"\nid: 8-be'}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from flask import Flask, request, jsonify\nimport hashlib\nimport secrets\nfrom datetime import datetime, timedelta\n\napp = Flask(__name__)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    data = request.get_json()\n    email = data.get('email')\n    password = data.get('password')\n    \n    if not email or not password:\n        return jsonify({\n            'success': False,\n            'error': 'Email and password required'\n        }), 400\n    \n    user = database.query(\n        \"SELECT id, email, password_hash FROM users WHERE email = ?\",\n        (email,)\n    )\n    \n    if not user:\n        return jsonify({\n            'success': False,\n            'error': 'Invalid credentials'\n        }), 401\n    \n    password_hash = hashlib.sha256(password.encode()).hexdigest()\n    \n    if password_hash != user['password_hash']:\n        return jsonify({\n            'success': False,\n            'error': 'Invalid credentials'\n        }), 401\n    \n    session_token = secrets.token_hex(32)  \n    expires_at = datetime.now() + timedelta(days=1) \n    \n    database.execute(\n        \"INSERT INTO sessions (user_id, token, expires_at) VALUES (?, ?, ?)\",\n        (user['id'], session_token, expires_at)\n    )\n    \n    return jsonify({\n        'success': True,\n        'sessionToken': session_token,\n        'user': {\n            'id': user['id'],\n            'email': user['email']\n        }\n    }), 200\n"})}),"\n",(0,i.jsx)(s.h3,{id:"questions-to-explore-in-the-code",children:"Questions to explore in the code"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Understanding the Request:"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"What endpoint URL does this code handle and what HTTP method does it accept?"}),"\n",(0,i.jsx)(s.li,{children:"What two pieces of data does the backend extract from the request?"}),"\n",(0,i.jsx)(s.li,{children:"Why does the backend validate the input again even though the frontend already validated it?"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Database & User Verification:"})}),"\n",(0,i.jsxs)(s.ol,{start:"4",children:["\n",(0,i.jsx)(s.li,{children:"What information does the database query retrieve about the user?"}),"\n",(0,i.jsx)(s.li,{children:"What happens if no user is found with the provided email?"}),"\n",(0,i.jsx)(s.li,{children:"How does the backend verify if the password is correct?"}),"\n",(0,i.jsx)(s.li,{children:'Why does the code always return "Invalid credentials" instead of specific errors like "User not found" or "Wrong password"?'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Security & Sessions:"})}),"\n",(0,i.jsxs)(s.ol,{start:"8",children:["\n",(0,i.jsx)(s.li,{children:"What is password hashing and why don't we store plain passwords?"}),"\n",(0,i.jsx)(s.li,{children:"What is a session token and how is it generated?"}),"\n",(0,i.jsx)(s.li,{children:"How long does the session token remain valid and where in the code can you see it?"}),"\n",(0,i.jsx)(s.li,{children:"What information does the backend send back to the frontend after successful login?"}),"\n"]}),"\n",(0,i.jsx)(s.hr,{})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);